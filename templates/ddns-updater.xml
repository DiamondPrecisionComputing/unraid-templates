<?xml version="1.0"?>
<Container version="2">
  <Name>ddns-updater</Name>
  <Repository>qmcgaw/ddns-updater</Repository>
  <Registry>https://hub.docker.com/r/qmcgaw/ddns-updater/</Registry>
  <Network>bridge</Network>
  <MyIP/>
  <Shell>sh</Shell>
  <Privileged>false</Privileged>
  <Support>https://forums.unraid.net/topic/111725-support-diamondprecisioncomputing-all-images-and-files/?tab=comments#comment-1021532</Support>
  <Project>https://github.com/qdm12/ddns-updater</Project>
  <Overview># Lightweight universal DDNS Updater with Docker and web UI&#xD;
&#xD;
Light container updating DNS A and/or AAAA records periodically for multiple DNS providers&#xD;
&#xD;
&amp;lt;img height="200" alt="DDNS Updater logo" src="https://raw.githubusercontent.com/qdm12/ddns-updater/master/readme/ddnsgopher.svg"&amp;gt;&#xD;
&#xD;
[![Build status](https://github.com/qdm12/ddns-updater/actions/workflows/build.yml/badge.svg)](https://github.com/qdm12/ddns-updater/actions/workflows/build.yml)&#xD;
&#xD;
[![dockeri.co](https://dockeri.co/image/qmcgaw/ddns-updater)](https://hub.docker.com/r/qmcgaw/ddns-updater)&#xD;
&#xD;
![Last release](https://img.shields.io/github/release/qdm12/ddns-updater?label=Last%20release)&#xD;
![Last Docker tag](https://img.shields.io/docker/v/qmcgaw/ddns-updater?sort=semver&amp;amp;label=Last%20Docker%20tag)&#xD;
[![Last release size](https://img.shields.io/docker/image-size/qmcgaw/ddns-updater?sort=semver&amp;amp;label=Last%20released%20image)](https://hub.docker.com/r/qmcgaw/ddns-updater/tags?page=1&amp;amp;ordering=last_updated)&#xD;
![GitHub last release date](https://img.shields.io/github/release-date/qdm12/ddns-updater?label=Last%20release%20date)&#xD;
![Commits since release](https://img.shields.io/github/commits-since/qdm12/ddns-updater/latest?sort=semver)&#xD;
&#xD;
[![Latest size](https://img.shields.io/docker/image-size/qmcgaw/ddns-updater/latest?label=Latest%20image)](https://hub.docker.com/r/qmcgaw/ddns-updater/tags)&#xD;
&#xD;
[![GitHub last commit](https://img.shields.io/github/last-commit/qdm12/ddns-updater.svg)](https://github.com/qdm12/ddns-updater/commits/main)&#xD;
[![GitHub commit activity](https://img.shields.io/github/commit-activity/y/qdm12/ddns-updater.svg)](https://github.com/qdm12/ddns-updater/graphs/contributors)&#xD;
[![GitHub closed PRs](https://img.shields.io/github/issues-pr-closed/qdm12/ddns-updater.svg)](https://github.com/qdm12/ddns-updater/pulls?q=is%3Apr+is%3Aclosed)&#xD;
[![GitHub issues](https://img.shields.io/github/issues/qdm12/ddns-updater.svg)](https://github.com/qdm12/ddns-updater/issues)&#xD;
[![GitHub closed issues](https://img.shields.io/github/issues-closed/qdm12/ddns-updater.svg)](https://github.com/qdm12/ddns-updater/issues?q=is%3Aissue+is%3Aclosed)&#xD;
&#xD;
[![Lines of code](https://img.shields.io/tokei/lines/github/qdm12/ddns-updater)](https://github.com/qdm12/ddns-updater)&#xD;
![Code size](https://img.shields.io/github/languages/code-size/qdm12/ddns-updater)&#xD;
![GitHub repo size](https://img.shields.io/github/repo-size/qdm12/ddns-updater)&#xD;
![Go version](https://img.shields.io/github/go-mod/go-version/qdm12/ddns-updater)&#xD;
&#xD;
[![MIT](https://img.shields.io/github/license/qdm12/ddns-updater)](https://github.com/qdm12/ddns-updater/master/LICENSE)&#xD;
![Visitors count](https://visitor-badge.laobi.icu/badge?page_id=ddns-updater.readme)&#xD;
&#xD;
## Features&#xD;
&#xD;
- Updates periodically A records for different DNS providers:&#xD;
  - Aliyun&#xD;
  - AllInkl&#xD;
  - Cloudflare&#xD;
  - DD24&#xD;
  - DDNSS.de&#xD;
  - DigitalOcean&#xD;
  - DonDominio&#xD;
  - DNSOMatic&#xD;
  - DNSPod&#xD;
  - Dreamhost&#xD;
  - DuckDNS&#xD;
  - DynDNS&#xD;
  - Dynu&#xD;
  - EasyDNS&#xD;
  - FreeDNS&#xD;
  - Gandi&#xD;
  - GCP&#xD;
  - GoDaddy&#xD;
  - Google&#xD;
  - He.net&#xD;
  - Infomaniak&#xD;
  - INWX&#xD;
  - Linode&#xD;
  - LuaDNS&#xD;
  - Name.com&#xD;
  - Namecheap&#xD;
  - Netcup&#xD;
  - NoIP&#xD;
  - Njalla&#xD;
  - OpenDNS&#xD;
  - OVH&#xD;
  - Porkbun&#xD;
  - Selfhost.de&#xD;
  - Servercow.de&#xD;
  - Spdyn&#xD;
  - Strato.de&#xD;
  - Variomedia.de&#xD;
  - Zoneedit&#xD;
  - **Want more?** [Create an issue for it](https://github.com/qdm12/ddns-updater/issues/new/choose)!&#xD;
- Web User interface&#xD;
&#xD;
![Web UI](https://raw.githubusercontent.com/qdm12/ddns-updater/master/readme/webui.png)&#xD;
&#xD;
- 11MB Docker image based on a Go static binary in a Scratch Docker image&#xD;
- Persistence with a JSON file *updates.json* to store old IP addresses with change times for each record&#xD;
- Docker healthcheck verifying the DNS resolution of your domains&#xD;
- Highly configurable&#xD;
- Send notifications with [**Shoutrrr**](https://containrrr.dev/shoutrrr/0.7/services/overview/) using `SHOUTRRR_ADDRESSES`&#xD;
- Compatible with `amd64`, `386`, `arm64`, `armv7`, `armv6`, `s390x`, `ppc64le`, `riscv64` CPU architectures.&#xD;
&#xD;
## Setup&#xD;
&#xD;
The program reads the configuration from a JSON object, either from a file or from an environment variable.&#xD;
&#xD;
1. Create a directory of your choice, say *data* with a file named **config.json** inside:&#xD;
&#xD;
    ```sh&#xD;
    mkdir data&#xD;
    touch data/config.json&#xD;
    # Owned by user ID of Docker container (1000)&#xD;
    chown -R 1000 data&#xD;
    # all access (for creating json database file data/updates.json)&#xD;
    chmod 700 data&#xD;
    # read access only&#xD;
    chmod 400 data/config.json&#xD;
    ```&#xD;
&#xD;
    If you want to use another user ID, [build the image yourself](#build-the-image) with `--build-arg UID=&amp;lt;your-uid&amp;gt;`. You could also just run the container as root with `--user="0"` but this is not advised security wise.&#xD;
1. Write a JSON configuration in *data/config.json*, for example:&#xD;
&#xD;
    ```json&#xD;
    {&#xD;
        "settings": [&#xD;
            {&#xD;
                "provider": "namecheap",&#xD;
                "domain": "example.com",&#xD;
                "host": "@",&#xD;
                "password": "e5322165c1d74692bfa6d807100c0310"&#xD;
            }&#xD;
        ]&#xD;
    }&#xD;
    ```&#xD;
&#xD;
    You can find more information in the [configuration section](#configuration) to customize it.&#xD;
&#xD;
1. Run the container with&#xD;
&#xD;
    ```sh&#xD;
    docker run -d -p 8000:8000/tcp -v "$(pwd)"/data:/updater/data qmcgaw/ddns-updater&#xD;
    ```&#xD;
&#xD;
1. &#x26A0;&#xFE0F; If you use IPv6, you might need to set `-e IPV6_PREFIX=/64` (`/64` is your prefix, depending on your ISP)&#xD;
1. (Optional) You can also set your JSON configuration as a single environment variable line (i.e. `{"settings": [{"provider": "namecheap", ...}]}`), which takes precedence over config.json. Note however that if you don't bind mount the `/updater/data` directory, there won't be a persistent database file `/updater/updates.json` but it will still work.&#xD;
&#xD;
### Next steps&#xD;
&#xD;
You can also use [docker-compose.yml](https://github.com/qdm12/ddns-updater/blob/master/docker-compose.yml) with:&#xD;
&#xD;
```sh&#xD;
docker-compose up -d&#xD;
```&#xD;
&#xD;
You can update the image with `docker pull qmcgaw/ddns-updater`. Other [Docker image tags are available](https://hub.docker.com/repository/docker/qmcgaw/ddns-updater/tags).&#xD;
&#xD;
### GHCR&#xD;
&#xD;
Images are also added to the Github Container Registry. To use the GHCR container replace `qmcgaw/ddns-updater` to `ghcr.io/qdm12/ddns-updater`, further details are available [here](https://github.com/qdm12/ddns-updater/pkgs/container/ddns-updater)&#xD;
&#xD;
## Configuration&#xD;
&#xD;
Start by having the following content in *config.json*, or in your `CONFIG` environment variable:&#xD;
&#xD;
```json&#xD;
{&#xD;
    "settings": [&#xD;
        {&#xD;
            "provider": "",&#xD;
        },&#xD;
        {&#xD;
            "provider": "",&#xD;
        }&#xD;
    ]&#xD;
}&#xD;
```&#xD;
&#xD;
For each setting, you need to fill in parameters.&#xD;
Check the documentation for your DNS provider:&#xD;
&#xD;
- [Aliyun](https://github.com/qdm12/ddns-updater/blob/master/docs/aliyun.md)&#xD;
- [Cloudflare](https://github.com/qdm12/ddns-updater/blob/master/docs/cloudflare.md)&#xD;
- [DDNSS.de](https://github.com/qdm12/ddns-updater/blob/master/docs/ddnss.de.md)&#xD;
- [DigitalOcean](https://github.com/qdm12/ddns-updater/blob/master/docs/digitalocean.md)&#xD;
- [DD24](https://github.com/qdm12/ddns-updater/blob/master/docs/domaindiscount24.md)&#xD;
- [DonDominio](https://github.com/qdm12/ddns-updater/blob/master/docs/dondominio.md)&#xD;
- [DNSOMatic](https://github.com/qdm12/ddns-updater/blob/master/docs/dnsomatic.md)&#xD;
- [DNSPod](https://github.com/qdm12/ddns-updater/blob/master/docs/dnspod.md)&#xD;
- [Dreamhost](https://github.com/qdm12/ddns-updater/blob/master/docs/dreamhost.md)&#xD;
- [DuckDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/duckdns.md)&#xD;
- [DynDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/dyndns.md)&#xD;
- [Dynu](https://github.com/qdm12/ddns-updater/blob/master/docs/dynu.md)&#xD;
- [DynV6](https://github.com/qdm12/ddns-updater/blob/master/docs/dynv6.md)&#xD;
- [EasyDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/easydns.md)&#xD;
- [FreeDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/freedns.md)&#xD;
- [Gandi](https://github.com/qdm12/ddns-updater/blob/master/docs/gandi.md)&#xD;
- [GCP](https://github.com/qdm12/ddns-updater/blob/master/docs/gcp.md)&#xD;
- [GoDaddy](https://github.com/qdm12/ddns-updater/blob/master/docs/godaddy.md)&#xD;
- [Google](https://github.com/qdm12/ddns-updater/blob/master/docs/google.md)&#xD;
- [He.net](https://github.com/qdm12/ddns-updater/blob/master/docs/he.net.md)&#xD;
- [Infomaniak](https://github.com/qdm12/ddns-updater/blob/master/docs/infomaniak.md)&#xD;
- [INWX](https://github.com/qdm12/ddns-updater/blob/master/docs/inwx.md)&#xD;
- [Linode](https://github.com/qdm12/ddns-updater/blob/master/docs/linode.md)&#xD;
- [LuaDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/luadns.md)&#xD;
- [Name.com](https://github.com/qdm12/ddns-updater/blob/master/docs/name.com.md)&#xD;
- [Namecheap](https://github.com/qdm12/ddns-updater/blob/master/docs/namecheap.md)&#xD;
- [Netcup](https://github.com/qdm12/ddns-updater/blob/master/docs/netcup.md)&#xD;
- [NoIP](https://github.com/qdm12/ddns-updater/blob/master/docs/noip.md)&#xD;
- [Njalla](https://github.com/qdm12/ddns-updater/blob/master/docs/njalla.md)&#xD;
- [OpenDNS](https://github.com/qdm12/ddns-updater/blob/master/docs/opendns.md)&#xD;
- [OVH](https://github.com/qdm12/ddns-updater/blob/master/docs/ovh.md)&#xD;
- [Porkbun](https://github.com/qdm12/ddns-updater/blob/master/docs/porkbun.md)&#xD;
- [Selfhost.de](https://github.com/qdm12/ddns-updater/blob/master/docs/selfhost.de.md)&#xD;
- [Servercow.de](https://github.com/qdm12/ddns-updater/blob/master/docs/servercow.md)&#xD;
- [Spdyn](https://github.com/qdm12/ddns-updater/blob/master/docs/spdyn.md)&#xD;
- [Strato.de](https://github.com/qdm12/ddns-updater/blob/master/docs/strato.md)&#xD;
- [Variomedia.de](https://github.com/qdm12/ddns-updater/blob/master/docs/variomedia.md)&#xD;
- [Zoneedit](https://github.com/qdm12/ddns-updater/blob/master/docs/zoneedit.md)&#xD;
&#xD;
Note that:&#xD;
&#xD;
- you can specify multiple hosts for the same domain using a comma separated list. For example with `"host": "@,subdomain1,subdomain2",`.&#xD;
&#xD;
### Environment variables&#xD;
&#xD;
| Environment variable | Default | Description |&#xD;
| --- | --- | --- |&#xD;
| `CONFIG` | | One line JSON object containing the entire config (takes precendence over config.json file) if specified |&#xD;
| `PERIOD` | `5m` | Default period of IP address check, following [this format](https://golang.org/pkg/time/#ParseDuration) |&#xD;
| `IPV6_PREFIX` | `/128` | IPv6 prefix used to mask your public IPv6 address and your record IPv6 address. Ranges from `/0` to `/128` depending on your ISP. |&#xD;
| `PUBLICIP_FETCHERS` | `all` | Comma separated fetcher types to obtain the public IP address from `http` and `dns` |&#xD;
| `PUBLICIP_HTTP_PROVIDERS` | `all` | Comma separated providers to obtain the public IP address (ipv4 or ipv6). See the [Public IP section](#public-ip) |&#xD;
| `PUBLICIPV4_HTTP_PROVIDERS` | `all` | Comma separated providers to obtain the public IPv4 address only. See the [Public IP section](#public-ip) |&#xD;
| `PUBLICIPV6_HTTP_PROVIDERS` | `all` | Comma separated providers to obtain the public IPv6 address only. See the [Public IP section](#public-ip) |&#xD;
| `PUBLICIP_DNS_PROVIDERS` | `all` | Comma separated providers to obtain the public IP address (IPv4 and/or IPv6). See the [Public IP section](#public-ip) |&#xD;
| `PUBLICIP_DNS_TIMEOUT` | `3s` | Public IP DNS query timeout |&#xD;
| `UPDATE_COOLDOWN_PERIOD` | `5m` | Duration to cooldown between updates for each record. This is useful to avoid being rate limited or banned. |&#xD;
| `HTTP_TIMEOUT` | `10s` | Timeout for all HTTP requests |&#xD;
| `LISTENING_PORT` | `8000` | Internal TCP listening port for the web UI |&#xD;
| `ROOT_URL` | `/` | URL path to append to all paths to the webUI (i.e. `/ddns` for accessing `https://example.com/ddns` through a proxy) |&#xD;
| `HEALTH_SERVER_ADDRESS` | `127.0.0.1:9999` | Health server listening address |&#xD;
| `DATADIR` | `/updater/data` | Directory to read and write data files from internally |&#xD;
| `BACKUP_PERIOD` | `0` | Set to a period (i.e. `72h15m`) to enable zip backups of data/config.json and data/updates.json in a zip file |&#xD;
| `BACKUP_DIRECTORY` | `/updater/data` | Directory to write backup zip files to if `BACKUP_PERIOD` is not `0`. |&#xD;
| `RESOLVER_ADDRESS` | Your network DNS | A plaintext DNS address to use, such as `1.1.1.1:53`. This is useful for split dns, see [#389](https://github.com/qdm12/ddns-updater/issues/389) |&#xD;
| `LOG_LEVEL` | `info` | Level of logging, `debug`, `info`, `warning` or `error` |&#xD;
| `LOG_CALLER` | `hidden` | Show caller per log line, `hidden` or `short` |&#xD;
| `SHOUTRRR_ADDRESSES` |  | (optional) Comma separated list of [Shoutrrr addresses](https://containrrr.dev/shoutrrr/services/overview/) (notification services) |&#xD;
| `TZ` | | Timezone to have accurate times, i.e. `America/Montreal` |&#xD;
&#xD;
#### Public IP&#xD;
&#xD;
By default, all public IP fetching types are used and cycled (over DNS and over HTTPs).&#xD;
&#xD;
On top of that, for each fetching method, all echo services available are cycled on each request.&#xD;
&#xD;
This allows you not to be blocked for making too many requests.&#xD;
&#xD;
You can otherwise customize it with the following:&#xD;
&#xD;
- `PUBLICIP_HTTP_PROVIDERS` gets your public IPv4 or IPv6 address. It can be one or more of the following:&#xD;
  - `ifconfig` using [https://ifconfig.io/ip](https://ifconfig.io/ip)&#xD;
  - `ipinfo` using [https://ipinfo.io/ip](https://ipinfo.io/ip)&#xD;
  - `google` using [https://domains.google.com/checkip](https://domains.google.com/checkip)&#xD;
  - You can also specify an HTTPS URL such as `https://ipinfo.io/ip`&#xD;
- `PUBLICIPV4_HTTP_PROVIDERS` gets your public IPv4 address only. It can be one or more of the following:&#xD;
  - `ipify` using [https://api.ipify.org](https://api.ipify.org)&#xD;
  - `noip` using [http://ip1.dynupdate.no-ip.com](http://ip1.dynupdate.no-ip.com)&#xD;
  - You can also specify an HTTPS URL such as `https://ipinfo.io/ip`&#xD;
- `PUBLICIPV6_HTTP_PROVIDERS` gets your public IPv6 address only. It can be one or more of the following:&#xD;
  - `ipify` using [https://api6.ipify.org](https://api6.ipify.org)&#xD;
  - `noip` using [http://ip1.dynupdate6.no-ip.com](http://ip1.dynupdate6.no-ip.com)&#xD;
  - You can also specify an HTTPS URL such as `https://ipinfo.io/ip`&#xD;
- `PUBLICIP_DNS_PROVIDERS` gets your public IPv4 address only or IPv6 address only or one of them (see #136). It can be one or more of the following:&#xD;
  - `cloudflare`&#xD;
  - `opendns`&#xD;
&#xD;
### Host firewall&#xD;
&#xD;
If you have a host firewall in place, this container needs the following ports:&#xD;
&#xD;
- TCP 443 outbound for outbound HTTPS&#xD;
- UDP 53 outbound for outbound DNS resolution&#xD;
- TCP 8000 inbound (or other) for the WebUI&#xD;
&#xD;
## Architecture&#xD;
&#xD;
At program start and every period (5 minutes by default):&#xD;
&#xD;
1. Fetch your public IP address&#xD;
1. For each record:&#xD;
    1. DNS resolve it to obtain its current IP address(es)&#xD;
        - If the resolution fails, update the record with your public IP address by calling the DNS provider API and finish&#xD;
    1. Check if your public IP address is within the resolved IP addresses&#xD;
        - Yes: skip the update&#xD;
        - No: update the record with your public IP address by calling the DNS provider API&#xD;
&#xD;
&#x1F4A1; We do DNS resolution every period so it detects a change made to the record manually, for example on the DNS provider web UI&#xD;
&#x1F4A1; As DNS resolutions are essentially free and without rate limiting, these are great to avoid getting banned for too many requests.&#xD;
&#xD;
### Special case: Cloudflare&#xD;
&#xD;
For Cloudflare records with the `proxied` option, the following is done.&#xD;
&#xD;
At program start and every period (5 minutes by default), for each record:&#xD;
&#xD;
1. Fetch your public IP address&#xD;
1. For each record:&#xD;
    1. Check the last IP address (persisted in `updates.json`) for that record&#xD;
        - If it doesn't exist, update the record with your public IP address by calling the DNS provider API and finish&#xD;
    1. Check if your public IP address matches the last IP address you updated the record with&#xD;
        - Yes: skip the update&#xD;
        - No: update the record with your public IP address by calling the DNS provider API&#xD;
&#xD;
This is the only way as doing a DNS resolution on the record will give the IP address of a Cloudflare server instead of your server.&#xD;
&#xD;
&#x26A0;&#xFE0F; This has the disadvantage that if the record is changed manually, the program will not detect it.&#xD;
We could do an API call to get the record IP address every period, but that would get you banned especially with a low period duration.&#xD;
&#xD;
## Testing&#xD;
&#xD;
- The automated healthcheck verifies all your records are up to date [using DNS lookups](https://github.com/qdm12/ddns-updater/blob/master/internal/healthcheck/healthcheck.go#L15)&#xD;
- You can also manually check, by:&#xD;
    1. Going to your DNS management webpage&#xD;
    1. Setting your record to `127.0.0.1`&#xD;
    1. Run the container&#xD;
    1. Refresh the DNS management webpage and verify the update happened&#xD;
&#xD;
## Build the image&#xD;
&#xD;
You can build the image yourself with:&#xD;
&#xD;
```sh&#xD;
docker build -t qmcgaw/ddns-updater https://github.com/qdm12/ddns-updater.git&#xD;
```&#xD;
&#xD;
You can use optional build arguments with `--build-arg KEY=VALUE` from the table below:&#xD;
&#xD;
| Build argument | Default | Description |&#xD;
| --- | --- | --- |&#xD;
| `UID` | `1000` | User ID running the container |&#xD;
| `GID` | `1000` | User group ID running the container |&#xD;
| `VERSION` | `unknown` | Version of the program and Docker image |&#xD;
| `CREATED` | `an unknown date` | Build date of the program and Docker image |&#xD;
| `COMMIT` | `unknown` | Commit hash of the program and Docker image |&#xD;
&#xD;
## Development and contributing&#xD;
&#xD;
- [Contribute with code](https://github.com/qdm12/ddns-updater/blob/master/docs/contributing.md)&#xD;
- [Github workflows to know what's building](https://github.com/qdm12/ddns-updater/actions)&#xD;
- [List of issues and feature requests](https://github.com/qdm12/ddns-updater/issues)&#xD;
- [Kanban board](https://github.com/qdm12/ddns-updater/projects/1)&#xD;
&#xD;
## License&#xD;
&#xD;
This repository is under an [MIT license](https://github.com/qdm12/ddns-updater/master/license)&#xD;
&#xD;
## Used in external projects&#xD;
&#xD;
- [Starttoaster/docker-traefik](https://github.com/Starttoaster/docker-traefik#home-networks-extra-credit-dynamic-dns)&#xD;
&#xD;
## Support&#xD;
&#xD;
Sponsor me on [Github](https://github.com/sponsors/qdm12) or donate to [paypal.me/qmcgaw](https://www.paypal.me/qmcgaw)&#xD;
&#xD;
[![https://github.com/sponsors/qdm12](https://raw.githubusercontent.com/qdm12/private-internet-access-docker/master/doc/sponsors.jpg)](https://github.com/sponsors/qdm12)&#xD;
[![https://www.paypal.me/qmcgaw](https://raw.githubusercontent.com/qdm12/private-internet-access-docker/master/doc/paypal.jpg)](https://www.paypal.me/qmcgaw)&#xD;
&#xD;
Many thanks to J. Famiglietti for supporting me financially &#x1F947;&#x1F44D;</Overview>
  <Category>Tools: Network:DNS</Category>
  <WebUI>http://[IP]:[PORT:8000]</WebUI>
  <TemplateURL>https://raw.githubusercontent.com/DiamondPrecisionComputing/unraid-templates/master/templates/ddns-updater.xml</TemplateURL>
  <Icon>https://raw.githubusercontent.com/DiamondPrecisionComputing/unraid-templates/master/templates/img/ddnsgopher.png</Icon>
  <DonateText>This app and docker were generously made by qmcgaw. If you like the project please consider making a donation toward his efforts and check out the MANY other projects he has created on GitHub.</DonateText>
  <DonateLink>https://www.paypal.me/qmcgaw</DonateLink>
  <Description>Lightweight universal DDNS Updater with Docker and web UI</Description>
  <Date>2021-10-06</Date>
  <Changes>
###v2.5.0
###Features
- 🆕 providers
  - Aliyun (#252, #253)
  - all-inkl.com (#309)
  - dynu.com (#285)
  - GCP (#337, #405)
  - inwx (#379, #473)
  - Porkbun (#217)
  - Servercow (#224)
- Shoutrrr library update to v0.7.0
- Cloudflare: create record if it does not exist (#477)
- DNSPod: log entire JSON response on error
- Dreamhost: allow to specify a custom host
- Specify resolver address with the RESOLVER_ADDRESS environment variable
- Specify resolver timeout with the RESOLVER_TIMEOUT environment variable
- Retry getting IP address up to 3 times
- Use github.com/breml/rootcerts v0.2.11 for TLS certs
- Add destination to notification errors
- Add GHCR registry image (#259)
- pkg/publicip/info package (#189)
- pkg/publicip: do not use providers banning us
###Fixes
- Cloudflare:
  - key -> userServiceKey variable name (#462)
  - fix service key regex
- dd24:
  - API call and fix (#236)
  - Handle non-empty responses
- ddnss.de add dual_stack parameter (#270, thanks @quantum-byte)
- DNSOMatic:
  - allow email addresses as user field
  - remove password regex check
- DNSPod add IPv6 record ID finder
- FreeDNS fix no ip change messages decoding
- Linode fix error decoding and set name field when creating record
- LuaDNS match configured host instead of first record (#249)
- Namecheap XML decoding error & allow empty IP field in response
- OVH:
  - fix signature in api mode
  - support nochg responses
- Spdyn response handling for good and nochg
- SHOUTRRR_ADDRESSES case sensitivity fixed
- Write JSON file from CONFIG variable
- DNS public IP fetching timeout fixed
- Better error messages for JSON decoding errors
- Shoutrrr validation error wrapping

###v2.4.1
###Fixes
- Fix: SHOUTRRR_ADDRESSES case sensitivity
###v2.4.0
###Features
- Support for domaindiscount24.com (#207)
- Support Shoutrrr addresses
- PUBLICIP_DNS_TIMEOUT variable
###Fixes
- Wildcard hosts (#214)
  - Keep multi-dots wildcard host structure in display strings
  - Use a function BuildURLQueryHostname for API calls to send the correct wildcard hostname
  - Send the wildcard character in API calls
  - Fix behavior for wildcard hosts for: cloudflare, ddnss.de, digitalocean, dnsomatic, dreamhost, dyn, dynv6, google, informaniak, njalla, noip, opendns, ovh, selfhost.de, spdyn, strato and variomedia
- Healthcheck query to 127.0.0.1:port instead of for example 0.0.0.0:port
- DATADIR defaults to /updater/data
- Server listens on all interfaces (IPv4 and IPv6) instead of just 0.0.0.0
- Context dependent DNS resolutions (to exit the program promptly)
- Larger default timeout of 3s for DNS query of public IP

###v2.3.0
- HTTP and DNS Public IP fetching options
- Njalla support
- SPDyn support
- Variomedia support
- Allow to run without settings
- debug log level
- HEALTH_SERVER_ADDRESS to change the internal health server listening address
- Request URL and body debug logs for each provider
- Read CONFIG environment variable with case sensitivity
- Dreamhost: create record before removing outdated one
- ipversion display
- ROOT_URL behavior when served outside of root (bug introduced with go-chi)
- IPV6_PREFIX support to avoid unneeded updates when using IPV6
- Use embed for static UI
- Upgrade linting setup with Golangci-lint to v1.40.1
  </Changes>
  <Config Name="WebUI" Target="8000" Default="8000" Mode="tcp" Description="Container Port: 8000" Type="Port" Display="always" Required="true" Mask="false"/>
  <Config Name="Config" Target="/updater/data" Default="/mnt/user/appdata/ddns-updater" Mode="rw" Description="Container Path: /updater/data" Type="Path" Display="always" Required="true" Mask="false">/mnt/user/appdata/ddns-updater</Config>
  <Config Name="TZ" Target="TZ" Default="" Mode="" Description="Timezone to have accurate times, i.e. America/Montreal" Type="Variable" Display="always" Required="true" Mask="false"/>
  <Config Name="PUBLICIP_FETCHERS" Target="PUBLICIP_FETCHERS" Default="all|http|dns" Mode="" Description="Comma separated fetcher types to obtain the public IP address from http and dns" Type="Variable" Display="always" Required="false" Mask="false">all</Config>
  <Config Name="PUBLICIP_HTTP_PROVIDERS" Target="PUBLICIP_HTTP_PROVIDERS" Default="all" Mode="" Description="PUBLICIP_HTTP_PROVIDERS gets your public IPv4 or IPv6 address. It can be one or more of the following: (default:all), opendns, ifconfig, ipinfo, ddns, google.&#13;&#10;&#13;&#10;You can also specify an HTTPS URL such as https://ipinfo.io/ip" Type="Variable" Display="always" Required="false" Mask="false">all</Config>
  <Config Name="PUBLICIPV4_HTTP_PROVIDERS" Target="PUBLICIPV4_HTTP_PROVIDERS" Default="all" Mode="" Description="PUBLICIPV4_HTTP_PROVIDERS gets your public IPv4 address only. It can be one or more of the following: (default:all), ipify, noip.&#13;&#10;&#13;&#10;You can also specify an HTTPS URL such as https://ipinfo.io/ip" Type="Variable" Display="always" Required="false" Mask="false">all</Config>
  <Config Name="PUBLICIPV6_HTTP_PROVIDERS" Target="PUBLICIPV6_HTTP_PROVIDERS" Default="all" Mode="" Description="PUBLICIPV6_HTTP_PROVIDERS gets your public IPv6 address only. It can be one or more of the following: (default:all), ipify, noip.&#13;&#10;&#13;&#10;You can also specify an HTTPS URL such as https://ipinfo.io/ip" Type="Variable" Display="always" Required="false" Mask="false">all</Config>
  <Config Name="PUBLICIP_DNS_PROVIDERS" Target="PUBLICIP_DNS_PROVIDERS" Default="all" Mode="" Description="PUBLICIP_DNS_PROVIDERS gets your public IPv4 address only or IPv6 address only or one of them. It can be one or more of the following: (default:all), google, cloudflare," Type="Variable" Display="always" Required="false" Mask="false">all</Config>
  <Config Name="PUBLICIP_DNS_TIMEOUT" Target="PUBLICIP_DNS_TIMEOUT" Default="3s" Mode="" Description="Public IP DNS query timeout (in seconds)" Type="Variable" Display="always" Required="false" Mask="false">3s</Config>
  <Config Name="UPDATE_COOLDOWN_PERIOD" Target="UPDATE_COOLDOWN_PERIOD" Default="5m" Mode="" Description="Duration to cooldown between updates for each record. This is useful to avoid being rate limited or banned. (in minutes)" Type="Variable" Display="always" Required="false" Mask="false">5m</Config>
  <Config Name="HTTP_TIMEOUT" Target="HTTP_TIMEOUT" Default="10s" Mode="" Description="Timeout for all HTTP requests (in seconds)" Type="Variable" Display="always" Required="false" Mask="false">10s</Config>
  <Config Name="BACKUP_DIRECTORY" Target="BACKUP_DIRECTORY" Default="/updater/data/backup" Mode="" Description="Directory to read and write data files from internally" Type="Variable" Display="advanced" Required="false" Mask="false">/updater/data/backup</Config>
  <Config Name="BACKUP_PERIOD" Target="BACKUP_PERIOD" Default="0" Mode="" Description="Set to a period (i.e. 72h15m) to enable zip backups of data/config.json and data/updates.json in a zip file" Type="Variable" Display="advanced" Required="false" Mask="false">0</Config>
  <Config Name="LOG_LEVEL" Target="LOG_LEVEL" Default="info|warning|error|debug" Mode="" Description="Level of logging, debug, info, warning or error" Type="Variable" Display="advanced" Required="false" Mask="false">info</Config>
  <Config Name="LOG_CALLER" Target="LOG_CALLER" Default="hidden|short" Mode="" Description="Container Variable: LOG_CALLER" Type="Variable" Display="advanced" Required="false" Mask="false">hidden</Config>
  <Config Name="ROOT_URL" Target="ROOT_URL" Default="/" Mode="" Description="URL path to append to all paths to the webUI (i.e. /ddns for accessing https://example.com/ddns through a proxy)" Type="Variable" Display="advanced" Required="false" Mask="false">/</Config>
  <Config Name="SHOUTRRR_ADDRESSES" Target="SHOUTRRR_ADDRESSES" Default="" Mode="" Description="(optional) Comma separated list of Shoutrrr addresses (notification services) -- (See GitHub Documentation)" Type="Variable" Display="advanced" Required="false" Mask="false"/>
  <Config Name="HEALTH_SERVER_ADDRESS" Target="HEALTH_SERVER_ADDRESS" Default="127.0.0.1:9999" Mode="" Description="Health server listening address" Type="Variable" Display="advanced" Required="false" Mask="false">127.0.0.1:9999</Config>
</Container>
